// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"crypto/x509"
	"sync"

	"github.com/hyperledger-labs/orion-server/pkg/cryptoservice"
)

type UserDBQuerier struct {
	GetCertificateStub        func(string) (*x509.Certificate, error)
	getCertificateMutex       sync.RWMutex
	getCertificateArgsForCall []struct {
		arg1 string
	}
	getCertificateReturns struct {
		result1 *x509.Certificate
		result2 error
	}
	getCertificateReturnsOnCall map[int]struct {
		result1 *x509.Certificate
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UserDBQuerier) GetCertificate(arg1 string) (*x509.Certificate, error) {
	fake.getCertificateMutex.Lock()
	ret, specificReturn := fake.getCertificateReturnsOnCall[len(fake.getCertificateArgsForCall)]
	fake.getCertificateArgsForCall = append(fake.getCertificateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetCertificate", []interface{}{arg1})
	fake.getCertificateMutex.Unlock()
	if fake.GetCertificateStub != nil {
		return fake.GetCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserDBQuerier) GetCertificateCallCount() int {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	return len(fake.getCertificateArgsForCall)
}

func (fake *UserDBQuerier) GetCertificateCalls(stub func(string) (*x509.Certificate, error)) {
	fake.getCertificateMutex.Lock()
	defer fake.getCertificateMutex.Unlock()
	fake.GetCertificateStub = stub
}

func (fake *UserDBQuerier) GetCertificateArgsForCall(i int) string {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	argsForCall := fake.getCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserDBQuerier) GetCertificateReturns(result1 *x509.Certificate, result2 error) {
	fake.getCertificateMutex.Lock()
	defer fake.getCertificateMutex.Unlock()
	fake.GetCertificateStub = nil
	fake.getCertificateReturns = struct {
		result1 *x509.Certificate
		result2 error
	}{result1, result2}
}

func (fake *UserDBQuerier) GetCertificateReturnsOnCall(i int, result1 *x509.Certificate, result2 error) {
	fake.getCertificateMutex.Lock()
	defer fake.getCertificateMutex.Unlock()
	fake.GetCertificateStub = nil
	if fake.getCertificateReturnsOnCall == nil {
		fake.getCertificateReturnsOnCall = make(map[int]struct {
			result1 *x509.Certificate
			result2 error
		})
	}
	fake.getCertificateReturnsOnCall[i] = struct {
		result1 *x509.Certificate
		result2 error
	}{result1, result2}
}

func (fake *UserDBQuerier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UserDBQuerier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cryptoservice.UserDBQuerier = new(UserDBQuerier)
