// Code generated by protoc-gen-go. DO NOT EDIT.
// source: configuration.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Privilege_Access int32

const (
	Privilege_Read      Privilege_Access = 0
	Privilege_ReadWrite Privilege_Access = 1
)

var Privilege_Access_name = map[int32]string{
	0: "Read",
	1: "ReadWrite",
}

var Privilege_Access_value = map[string]int32{
	"Read":      0,
	"ReadWrite": 1,
}

func (x Privilege_Access) String() string {
	return proto.EnumName(Privilege_Access_name, int32(x))
}

func (Privilege_Access) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{6, 0}
}

// ClusterConfig holds the configuration of a
// blockchain database cluster which includes
// a set of nodes, admins, and a root certificate
// authority
type ClusterConfig struct {
	Nodes                []*NodeConfig `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Admins               []*Admin      `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins,omitempty"`
	CertAuthConfig       *CAConfig     `protobuf:"bytes,3,opt,name=cert_auth_config,json=certAuthConfig,proto3" json:"cert_auth_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterConfig) Reset()         { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string { return proto.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()    {}
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{0}
}

func (m *ClusterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterConfig.Unmarshal(m, b)
}
func (m *ClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterConfig.Marshal(b, m, deterministic)
}
func (m *ClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConfig.Merge(m, src)
}
func (m *ClusterConfig) XXX_Size() int {
	return xxx_messageInfo_ClusterConfig.Size(m)
}
func (m *ClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConfig proto.InternalMessageInfo

func (m *ClusterConfig) GetNodes() []*NodeConfig {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ClusterConfig) GetAdmins() []*Admin {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *ClusterConfig) GetCertAuthConfig() *CAConfig {
	if m != nil {
		return m.CertAuthConfig
	}
	return nil
}

// NodeConfig holds the information about a
// database node in the cluster. TODO: change
// the name NodeConfig to Node once the existing
// message Node is renamed to something else.
type NodeConfig struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Certificate          []byte   `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeConfig) Reset()         { *m = NodeConfig{} }
func (m *NodeConfig) String() string { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()    {}
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{1}
}

func (m *NodeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeConfig.Unmarshal(m, b)
}
func (m *NodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeConfig.Marshal(b, m, deterministic)
}
func (m *NodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConfig.Merge(m, src)
}
func (m *NodeConfig) XXX_Size() int {
	return xxx_messageInfo_NodeConfig.Size(m)
}
func (m *NodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConfig proto.InternalMessageInfo

func (m *NodeConfig) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *NodeConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *NodeConfig) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// Admin holds the id and certificate of the
// cluster administrator
type Admin struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Certificate          []byte   `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Admin) Reset()         { *m = Admin{} }
func (m *Admin) String() string { return proto.CompactTextString(m) }
func (*Admin) ProtoMessage()    {}
func (*Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{2}
}

func (m *Admin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Admin.Unmarshal(m, b)
}
func (m *Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Admin.Marshal(b, m, deterministic)
}
func (m *Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Admin.Merge(m, src)
}
func (m *Admin) XXX_Size() int {
	return xxx_messageInfo_Admin.Size(m)
}
func (m *Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_Admin proto.InternalMessageInfo

func (m *Admin) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Admin) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type CAConfig struct {
	Roots                [][]byte `protobuf:"bytes,1,rep,name=roots,proto3" json:"roots,omitempty"`
	Intermediates        [][]byte `protobuf:"bytes,2,rep,name=intermediates,proto3" json:"intermediates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAConfig) Reset()         { *m = CAConfig{} }
func (m *CAConfig) String() string { return proto.CompactTextString(m) }
func (*CAConfig) ProtoMessage()    {}
func (*CAConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{3}
}

func (m *CAConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAConfig.Unmarshal(m, b)
}
func (m *CAConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAConfig.Marshal(b, m, deterministic)
}
func (m *CAConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAConfig.Merge(m, src)
}
func (m *CAConfig) XXX_Size() int {
	return xxx_messageInfo_CAConfig.Size(m)
}
func (m *CAConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CAConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CAConfig proto.InternalMessageInfo

func (m *CAConfig) GetRoots() [][]byte {
	if m != nil {
		return m.Roots
	}
	return nil
}

func (m *CAConfig) GetIntermediates() [][]byte {
	if m != nil {
		return m.Intermediates
	}
	return nil
}

// Database configuration. Stores default read/write ACLs
// Stored as value in _dbs system database under key 'name'
type DatabaseConfig struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadAccessUsers      []string `protobuf:"bytes,2,rep,name=read_access_users,json=readAccessUsers,proto3" json:"read_access_users,omitempty"`
	WriteAccessUsers     []string `protobuf:"bytes,3,rep,name=write_access_users,json=writeAccessUsers,proto3" json:"write_access_users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatabaseConfig) Reset()         { *m = DatabaseConfig{} }
func (m *DatabaseConfig) String() string { return proto.CompactTextString(m) }
func (*DatabaseConfig) ProtoMessage()    {}
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{4}
}

func (m *DatabaseConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatabaseConfig.Unmarshal(m, b)
}
func (m *DatabaseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatabaseConfig.Marshal(b, m, deterministic)
}
func (m *DatabaseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseConfig.Merge(m, src)
}
func (m *DatabaseConfig) XXX_Size() int {
	return xxx_messageInfo_DatabaseConfig.Size(m)
}
func (m *DatabaseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseConfig proto.InternalMessageInfo

func (m *DatabaseConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatabaseConfig) GetReadAccessUsers() []string {
	if m != nil {
		return m.ReadAccessUsers
	}
	return nil
}

func (m *DatabaseConfig) GetWriteAccessUsers() []string {
	if m != nil {
		return m.WriteAccessUsers
	}
	return nil
}

// User holds userID, certificate, privilege the user has,
// and groups the user belong to.
type User struct {
	ID                   string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Certificate          []byte     `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Privilege            *Privilege `protobuf:"bytes,3,opt,name=privilege,proto3" json:"privilege,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{5}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *User) GetPrivilege() *Privilege {
	if m != nil {
		return m.Privilege
	}
	return nil
}

// Privilege holds user/group privilege information such as
// a list of databases to which the read is allowed, a list of
// databases to which the write is allowed, bools to indicate
// where the db manipulation such as DB creation/deletion and
// user manipulation such as add/update/delete are allowed.
type Privilege struct {
	DBPermission          map[string]Privilege_Access `protobuf:"bytes,1,rep,name=DB_permission,json=DBPermission,proto3" json:"DB_permission,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=types.Privilege_Access"`
	DBAdministration      bool                        `protobuf:"varint,2,opt,name=DB_administration,json=DBAdministration,proto3" json:"DB_administration,omitempty"`
	ClusterAdministration bool                        `protobuf:"varint,4,opt,name=cluster_administration,json=clusterAdministration,proto3" json:"cluster_administration,omitempty"`
	UserAdministration    bool                        `protobuf:"varint,3,opt,name=user_administration,json=userAdministration,proto3" json:"user_administration,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *Privilege) Reset()         { *m = Privilege{} }
func (m *Privilege) String() string { return proto.CompactTextString(m) }
func (*Privilege) ProtoMessage()    {}
func (*Privilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_415c9e57263f32ab, []int{6}
}

func (m *Privilege) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Privilege.Unmarshal(m, b)
}
func (m *Privilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Privilege.Marshal(b, m, deterministic)
}
func (m *Privilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Privilege.Merge(m, src)
}
func (m *Privilege) XXX_Size() int {
	return xxx_messageInfo_Privilege.Size(m)
}
func (m *Privilege) XXX_DiscardUnknown() {
	xxx_messageInfo_Privilege.DiscardUnknown(m)
}

var xxx_messageInfo_Privilege proto.InternalMessageInfo

func (m *Privilege) GetDBPermission() map[string]Privilege_Access {
	if m != nil {
		return m.DBPermission
	}
	return nil
}

func (m *Privilege) GetDBAdministration() bool {
	if m != nil {
		return m.DBAdministration
	}
	return false
}

func (m *Privilege) GetClusterAdministration() bool {
	if m != nil {
		return m.ClusterAdministration
	}
	return false
}

func (m *Privilege) GetUserAdministration() bool {
	if m != nil {
		return m.UserAdministration
	}
	return false
}

func init() {
	proto.RegisterEnum("types.Privilege_Access", Privilege_Access_name, Privilege_Access_value)
	proto.RegisterType((*ClusterConfig)(nil), "types.ClusterConfig")
	proto.RegisterType((*NodeConfig)(nil), "types.NodeConfig")
	proto.RegisterType((*Admin)(nil), "types.Admin")
	proto.RegisterType((*CAConfig)(nil), "types.CAConfig")
	proto.RegisterType((*DatabaseConfig)(nil), "types.DatabaseConfig")
	proto.RegisterType((*User)(nil), "types.User")
	proto.RegisterType((*Privilege)(nil), "types.Privilege")
	proto.RegisterMapType((map[string]Privilege_Access)(nil), "types.Privilege.DBPermissionEntry")
}

func init() { proto.RegisterFile("configuration.proto", fileDescriptor_415c9e57263f32ab) }

var fileDescriptor_415c9e57263f32ab = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x89, 0x53, 0x9a, 0x69, 0x92, 0xba, 0x53, 0x7e, 0x2c, 0x4e, 0xc1, 0xaa, 0x44, 0x54,
	0xc0, 0x91, 0x8a, 0x90, 0x28, 0xb7, 0xa4, 0x06, 0xd4, 0x0b, 0xaa, 0x56, 0x42, 0x20, 0x2e, 0xd6,
	0xda, 0xde, 0x36, 0xab, 0xc6, 0xde, 0x68, 0x77, 0x5d, 0xd4, 0x0b, 0xef, 0xc1, 0x0b, 0xf2, 0x1c,
	0x68, 0x77, 0x9d, 0xb6, 0x71, 0x4e, 0xdc, 0x66, 0xbe, 0xf9, 0xbe, 0x99, 0xd9, 0x99, 0xd1, 0xc2,
	0x61, 0x2e, 0xaa, 0x4b, 0x7e, 0x55, 0x4b, 0xaa, 0xb9, 0xa8, 0xe2, 0x95, 0x14, 0x5a, 0x60, 0x4f,
	0xdf, 0xae, 0x98, 0x8a, 0xfe, 0x78, 0x30, 0x3c, 0x5b, 0xd6, 0x4a, 0x33, 0x79, 0x66, 0x59, 0xf8,
	0x0a, 0x7a, 0x95, 0x28, 0x98, 0x0a, 0xbd, 0x71, 0x77, 0xb2, 0x77, 0x72, 0x10, 0x5b, 0x62, 0xfc,
	0x55, 0x14, 0xcc, 0x31, 0x88, 0x8b, 0xe3, 0x11, 0xec, 0xd0, 0xa2, 0xe4, 0x95, 0x0a, 0x3b, 0x96,
	0x39, 0x68, 0x98, 0x33, 0x03, 0x92, 0x26, 0x86, 0xa7, 0x10, 0xe4, 0x4c, 0xea, 0x94, 0xd6, 0x7a,
	0x91, 0xba, 0x46, 0xc2, 0xee, 0xd8, 0x9b, 0xec, 0x9d, 0xec, 0x37, 0xfc, 0xb3, 0x59, 0x93, 0x77,
	0x64, 0x88, 0xb3, 0x5a, 0x2f, 0x9c, 0x1f, 0x2d, 0x01, 0xee, 0xab, 0xe2, 0x08, 0x3a, 0xe7, 0x49,
	0xe8, 0x8d, 0xbd, 0x49, 0x9f, 0x74, 0xce, 0x13, 0x0c, 0xe1, 0x31, 0x2d, 0x0a, 0xc9, 0x94, 0xa9,
	0x6f, 0xc0, 0xb5, 0x8b, 0x08, 0xfe, 0x4a, 0x48, 0x6d, 0xcb, 0x0c, 0x89, 0xb5, 0x71, 0x0c, 0x7b,
	0x26, 0x3b, 0xbf, 0xe4, 0x39, 0xd5, 0x2c, 0xf4, 0xc7, 0xde, 0x64, 0x40, 0x1e, 0x42, 0xd1, 0x29,
	0xf4, 0x6c, 0xe7, 0x5b, 0x85, 0x5a, 0xd2, 0xce, 0xb6, 0xf4, 0x33, 0xec, 0xae, 0x1f, 0x81, 0x4f,
	0xa0, 0x27, 0x85, 0xd0, 0x6e, 0x7c, 0x03, 0xe2, 0x1c, 0x3c, 0x82, 0x21, 0xaf, 0x34, 0x93, 0x25,
	0x2b, 0x38, 0xd5, 0xcc, 0x8d, 0x6c, 0x40, 0x36, 0xc1, 0xe8, 0x37, 0x8c, 0x12, 0xaa, 0x69, 0x46,
	0xd5, 0xfa, 0xd1, 0x08, 0x7e, 0x45, 0x4b, 0xd6, 0x74, 0x63, 0x6d, 0x3c, 0x86, 0x03, 0xc9, 0x68,
	0x91, 0xd2, 0x3c, 0x67, 0x4a, 0xa5, 0xb5, 0x62, 0xd2, 0xe5, 0xeb, 0x93, 0x7d, 0x13, 0x98, 0x59,
	0xfc, 0x9b, 0x81, 0xf1, 0x0d, 0xe0, 0x2f, 0xc9, 0x35, 0xdb, 0x24, 0x77, 0x2d, 0x39, 0xb0, 0x91,
	0x07, 0xec, 0x68, 0x01, 0xbe, 0x31, 0xfe, 0x7f, 0x02, 0x18, 0x43, 0x7f, 0x25, 0xf9, 0x0d, 0x5f,
	0xb2, 0x2b, 0xd6, 0xac, 0x37, 0x68, 0xd6, 0x7b, 0xb1, 0xc6, 0xc9, 0x3d, 0x25, 0xfa, 0xdb, 0x81,
	0xfe, 0x5d, 0x00, 0xbf, 0xc0, 0x30, 0x99, 0xa7, 0x2b, 0x26, 0x4b, 0xae, 0x14, 0x17, 0x55, 0x73,
	0x7a, 0x51, 0x3b, 0x43, 0x9c, 0xcc, 0x2f, 0xee, 0x48, 0x9f, 0x2a, 0x2d, 0x6f, 0xc9, 0xe0, 0x21,
	0x84, 0xaf, 0xe1, 0x20, 0x99, 0xa7, 0xf6, 0xf2, 0xb8, 0xd2, 0xee, 0xde, 0x6d, 0xbb, 0xbb, 0x24,
	0x48, 0xe6, 0xb3, 0x0d, 0x1c, 0xdf, 0xc3, 0xb3, 0xdc, 0x5d, 0x7e, 0x5b, 0xe1, 0x5b, 0xc5, 0xd3,
	0x26, 0xda, 0x92, 0x4d, 0xe1, 0xd0, 0x4c, 0xb1, 0xad, 0xe9, 0x5a, 0x0d, 0x9a, 0xd0, 0xa6, 0xe0,
	0xc5, 0x0f, 0xd3, 0x54, 0xab, 0x6f, 0x0c, 0xa0, 0x7b, 0xcd, 0x6e, 0x9b, 0x19, 0x1b, 0x13, 0xdf,
	0x42, 0xef, 0x86, 0x2e, 0x6b, 0x37, 0xde, 0xd1, 0xc9, 0xf3, 0xad, 0xc7, 0xbb, 0x4d, 0x11, 0xc7,
	0xfa, 0xd8, 0xf9, 0xe0, 0x45, 0x2f, 0x61, 0xc7, 0x81, 0xb8, 0x0b, 0x3e, 0x61, 0xb4, 0x08, 0x1e,
	0xe1, 0x10, 0xfa, 0xc6, 0xfa, 0x6e, 0x76, 0x1b, 0x78, 0xf3, 0xe3, 0x9f, 0x93, 0x2b, 0xae, 0x17,
	0x75, 0x16, 0xf3, 0xac, 0x8c, 0x73, 0x51, 0x4e, 0xb3, 0xa5, 0xc8, 0xaf, 0xf3, 0x05, 0xe5, 0x55,
	0x91, 0x4d, 0xed, 0x5f, 0xa0, 0xa6, 0xb6, 0x54, 0xb6, 0x63, 0xbd, 0x77, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xdc, 0x62, 0xbc, 0x30, 0x04, 0x00, 0x00,
}
