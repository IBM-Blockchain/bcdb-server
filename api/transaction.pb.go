// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("transaction.proto", fileDescriptor_2cc4e03d2c28c490) }

var fileDescriptor_2cc4e03d2c28c490 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcd, 0xb1, 0x0a, 0xc2, 0x40,
	0x0c, 0xc6, 0x71, 0x8a, 0xe0, 0x50, 0x51, 0x68, 0xc7, 0x3e, 0x80, 0x74, 0xba, 0x8a, 0xe2, 0x0b,
	0x08, 0xe2, 0x6e, 0x9d, 0xdc, 0x92, 0x33, 0xd8, 0x60, 0x7b, 0x09, 0x77, 0x69, 0xc1, 0xb7, 0x17,
	0xec, 0xa0, 0xe3, 0xf7, 0xe3, 0x83, 0x7f, 0x5e, 0x58, 0x84, 0x90, 0xc0, 0x1b, 0x4b, 0x70, 0x1a,
	0xc5, 0xa4, 0x5c, 0x80, 0x72, 0xb5, 0xb2, 0xb7, 0x52, 0x9a, 0x65, 0x7f, 0xc9, 0x37, 0xb7, 0xdf,
	0xad, 0x9d, 0x7c, 0x79, 0xcc, 0x8b, 0x76, 0xc4, 0x81, 0xed, 0xcf, 0xcb, 0xb5, 0x03, 0x65, 0x77,
	0x0e, 0x13, 0xf5, 0xa2, 0x54, 0xcd, 0xf3, 0x4a, 0x49, 0x25, 0x24, 0xaa, 0xb3, 0x5d, 0x76, 0xaa,
	0xef, 0xdb, 0x27, 0x5b, 0x37, 0xa2, 0x63, 0x1c, 0x9c, 0x97, 0xa1, 0xc1, 0x5e, 0xfc, 0xcb, 0x77,
	0xc0, 0xe1, 0x81, 0x4d, 0xa2, 0x38, 0x51, 0x6c, 0x40, 0x19, 0x97, 0xdf, 0xf2, 0xe1, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xda, 0x16, 0xa9, 0x41, 0xa0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionSvcClient is the client API for TransactionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionSvcClient interface {
	SubmitTransaction(ctx context.Context, opts ...grpc.CallOption) (TransactionSvc_SubmitTransactionClient, error)
}

type transactionSvcClient struct {
	cc *grpc.ClientConn
}

func NewTransactionSvcClient(cc *grpc.ClientConn) TransactionSvcClient {
	return &transactionSvcClient{cc}
}

func (c *transactionSvcClient) SubmitTransaction(ctx context.Context, opts ...grpc.CallOption) (TransactionSvc_SubmitTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionSvc_serviceDesc.Streams[0], "/api.TransactionSvc/SubmitTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionSvcSubmitTransactionClient{stream}
	return x, nil
}

type TransactionSvc_SubmitTransactionClient interface {
	Send(*Envelope) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type transactionSvcSubmitTransactionClient struct {
	grpc.ClientStream
}

func (x *transactionSvcSubmitTransactionClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionSvcSubmitTransactionClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionSvcServer is the server API for TransactionSvc service.
type TransactionSvcServer interface {
	SubmitTransaction(TransactionSvc_SubmitTransactionServer) error
}

// UnimplementedTransactionSvcServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionSvcServer struct {
}

func (*UnimplementedTransactionSvcServer) SubmitTransaction(srv TransactionSvc_SubmitTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}

func RegisterTransactionSvcServer(s *grpc.Server, srv TransactionSvcServer) {
	s.RegisterService(&_TransactionSvc_serviceDesc, srv)
}

func _TransactionSvc_SubmitTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionSvcServer).SubmitTransaction(&transactionSvcSubmitTransactionServer{stream})
}

type TransactionSvc_SubmitTransactionServer interface {
	Send(*Response) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type transactionSvcSubmitTransactionServer struct {
	grpc.ServerStream
}

func (x *transactionSvcSubmitTransactionServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionSvcSubmitTransactionServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TransactionSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TransactionSvc",
	HandlerType: (*TransactionSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitTransaction",
			Handler:       _TransactionSvc_SubmitTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
