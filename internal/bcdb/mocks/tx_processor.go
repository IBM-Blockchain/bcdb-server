// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	errors "github.com/hyperledger-labs/orion-server/internal/errors"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/hyperledger-labs/orion-server/pkg/types"
)

// TxProcessor is an autogenerated mock type for the TxProcessor type
type TxProcessor struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TxProcessor) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClusterStatus provides a mock function with given fields:
func (_m *TxProcessor) ClusterStatus() (string, []string) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func() []string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// IsLeader provides a mock function with given fields:
func (_m *TxProcessor) IsLeader() *errors.NotLeaderError {
	ret := _m.Called()

	var r0 *errors.NotLeaderError
	if rf, ok := ret.Get(0).(func() *errors.NotLeaderError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.NotLeaderError)
		}
	}

	return r0
}

// SubmitTransaction provides a mock function with given fields: tx, timeout
func (_m *TxProcessor) SubmitTransaction(tx interface{}, timeout time.Duration) (*types.TxReceiptResponse, error) {
	ret := _m.Called(tx, timeout)

	var r0 *types.TxReceiptResponse
	if rf, ok := ret.Get(0).(func(interface{}, time.Duration) *types.TxReceiptResponse); ok {
		r0 = rf(tx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TxReceiptResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, time.Duration) error); ok {
		r1 = rf(tx, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
