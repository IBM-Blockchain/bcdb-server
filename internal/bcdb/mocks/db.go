// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "github.com/IBM-Blockchain/bcdb-server/config"
import mock "github.com/stretchr/testify/mock"
import time "time"
import types "github.com/IBM-Blockchain/bcdb-server/pkg/types"
import x509 "crypto/x509"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// BootstrapDB provides a mock function with given fields: conf
func (_m *DB) BootstrapDB(conf *config.Configurations) (*types.ResponseEnvelope, error) {
	ret := _m.Called(conf)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(*config.Configurations) *types.ResponseEnvelope); ok {
		r0 = rf(conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*config.Configurations) error); ok {
		r1 = rf(conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesUserExist provides a mock function with given fields: userID
func (_m *DB) DoesUserExist(userID string) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeader provides a mock function with given fields: userID, blockNum
func (_m *DB) GetBlockHeader(userID string, blockNum uint64) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID, blockNum)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, uint64) *types.ResponseEnvelope); ok {
		r0 = rf(userID, blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(userID, blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificate provides a mock function with given fields: userID
func (_m *DB) GetCertificate(userID string) (*x509.Certificate, error) {
	ret := _m.Called(userID)

	var r0 *x509.Certificate
	if rf, ok := ret.Get(0).(func(string) *x509.Certificate); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*x509.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields:
func (_m *DB) GetConfig() (*types.ResponseEnvelope, error) {
	ret := _m.Called()

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func() *types.ResponseEnvelope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBStatus provides a mock function with given fields: dbName
func (_m *DB) GetDBStatus(dbName string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEnvelope); ok {
		r0 = rf(dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: dbName, querierUserID, key
func (_m *DB) GetData(dbName string, querierUserID string, key string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName, querierUserID, key)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string, string) *types.ResponseEnvelope); ok {
		r0 = rf(dbName, querierUserID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(dbName, querierUserID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeletedValues provides a mock function with given fields: dbname, key
func (_m *DB) GetDeletedValues(dbname string, key string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbname, key)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string) *types.ResponseEnvelope); ok {
		r0 = rf(dbname, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dbname, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLedgerPath provides a mock function with given fields: userID, start, end
func (_m *DB) GetLedgerPath(userID string, start uint64, end uint64) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID, start, end)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) *types.ResponseEnvelope); ok {
		r0 = rf(userID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64) error); ok {
		r1 = rf(userID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostRecentValueAtOrBelow provides a mock function with given fields: dbName, key, version
func (_m *DB) GetMostRecentValueAtOrBelow(dbName string, key string, version *types.Version) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName, key, version)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string, *types.Version) *types.ResponseEnvelope); ok {
		r0 = rf(dbName, key, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *types.Version) error); ok {
		r1 = rf(dbName, key, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextValues provides a mock function with given fields: dbname, key, version
func (_m *DB) GetNextValues(dbname string, key string, version *types.Version) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbname, key, version)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string, *types.Version) *types.ResponseEnvelope); ok {
		r0 = rf(dbname, key, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *types.Version) error); ok {
		r1 = rf(dbname, key, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeConfig provides a mock function with given fields: nodeID
func (_m *DB) GetNodeConfig(nodeID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(nodeID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEnvelope); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreviousValues provides a mock function with given fields: dbname, key, version
func (_m *DB) GetPreviousValues(dbname string, key string, version *types.Version) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbname, key, version)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string, *types.Version) *types.ResponseEnvelope); ok {
		r0 = rf(dbname, key, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *types.Version) error); ok {
		r1 = rf(dbname, key, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReaders provides a mock function with given fields: dbName, key
func (_m *DB) GetReaders(dbName string, key string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName, key)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string) *types.ResponseEnvelope); ok {
		r0 = rf(dbName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dbName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxIDsSubmittedByUser provides a mock function with given fields: userID
func (_m *DB) GetTxIDsSubmittedByUser(userID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEnvelope); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxProof provides a mock function with given fields: userID, blockNum, txIdx
func (_m *DB) GetTxProof(userID string, blockNum uint64, txIdx uint64) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID, blockNum, txIdx)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) *types.ResponseEnvelope); ok {
		r0 = rf(userID, blockNum, txIdx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64) error); ok {
		r1 = rf(userID, blockNum, txIdx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxReceipt provides a mock function with given fields: userId, txID
func (_m *DB) GetTxReceipt(userId string, txID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userId, txID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string) *types.ResponseEnvelope); ok {
		r0 = rf(userId, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: querierUserID, targetUserID
func (_m *DB) GetUser(querierUserID string, targetUserID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(querierUserID, targetUserID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string) *types.ResponseEnvelope); ok {
		r0 = rf(querierUserID, targetUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(querierUserID, targetUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValueAt provides a mock function with given fields: dbName, key, version
func (_m *DB) GetValueAt(dbName string, key string, version *types.Version) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName, key, version)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string, *types.Version) *types.ResponseEnvelope); ok {
		r0 = rf(dbName, key, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *types.Version) error); ok {
		r1 = rf(dbName, key, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValues provides a mock function with given fields: dbName, key
func (_m *DB) GetValues(dbName string, key string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName, key)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string) *types.ResponseEnvelope); ok {
		r0 = rf(dbName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dbName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValuesDeletedByUser provides a mock function with given fields: userID
func (_m *DB) GetValuesDeletedByUser(userID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEnvelope); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValuesReadByUser provides a mock function with given fields: userID
func (_m *DB) GetValuesReadByUser(userID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEnvelope); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValuesWrittenByUser provides a mock function with given fields: userID
func (_m *DB) GetValuesWrittenByUser(userID string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(userID)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEnvelope); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWriters provides a mock function with given fields: dbName, key
func (_m *DB) GetWriters(dbName string, key string) (*types.ResponseEnvelope, error) {
	ret := _m.Called(dbName, key)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(string, string) *types.ResponseEnvelope); ok {
		r0 = rf(dbName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dbName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Height provides a mock function with given fields:
func (_m *DB) Height() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDBExists provides a mock function with given fields: name
func (_m *DB) IsDBExists(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LedgerHeight provides a mock function with given fields:
func (_m *DB) LedgerHeight() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitTransaction provides a mock function with given fields: tx, timeout
func (_m *DB) SubmitTransaction(tx interface{}, timeout time.Duration) (*types.ResponseEnvelope, error) {
	ret := _m.Called(tx, timeout)

	var r0 *types.ResponseEnvelope
	if rf, ok := ret.Get(0).(func(interface{}, time.Duration) *types.ResponseEnvelope); ok {
		r0 = rf(tx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEnvelope)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, time.Duration) error); ok {
		r1 = rf(tx, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
