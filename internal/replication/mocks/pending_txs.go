// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger-labs/orion-server/internal/replication"
)

type PendingTxsReleaser struct {
	ReleaseWithErrorStub        func([]string, error)
	releaseWithErrorMutex       sync.RWMutex
	releaseWithErrorArgsForCall []struct {
		arg1 []string
		arg2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PendingTxsReleaser) ReleaseWithError(arg1 []string, arg2 error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.releaseWithErrorMutex.Lock()
	fake.releaseWithErrorArgsForCall = append(fake.releaseWithErrorArgsForCall, struct {
		arg1 []string
		arg2 error
	}{arg1Copy, arg2})
	fake.recordInvocation("ReleaseWithError", []interface{}{arg1Copy, arg2})
	fake.releaseWithErrorMutex.Unlock()
	if fake.ReleaseWithErrorStub != nil {
		fake.ReleaseWithErrorStub(arg1, arg2)
	}
}

func (fake *PendingTxsReleaser) ReleaseWithErrorCallCount() int {
	fake.releaseWithErrorMutex.RLock()
	defer fake.releaseWithErrorMutex.RUnlock()
	return len(fake.releaseWithErrorArgsForCall)
}

func (fake *PendingTxsReleaser) ReleaseWithErrorCalls(stub func([]string, error)) {
	fake.releaseWithErrorMutex.Lock()
	defer fake.releaseWithErrorMutex.Unlock()
	fake.ReleaseWithErrorStub = stub
}

func (fake *PendingTxsReleaser) ReleaseWithErrorArgsForCall(i int) ([]string, error) {
	fake.releaseWithErrorMutex.RLock()
	defer fake.releaseWithErrorMutex.RUnlock()
	argsForCall := fake.releaseWithErrorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PendingTxsReleaser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseWithErrorMutex.RLock()
	defer fake.releaseWithErrorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PendingTxsReleaser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ replication.PendingTxsReleaser = new(PendingTxsReleaser)
