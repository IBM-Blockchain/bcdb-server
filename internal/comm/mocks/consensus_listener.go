// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/orion-server/internal/comm"
	"go.etcd.io/etcd/raft"
	"go.etcd.io/etcd/raft/raftpb"
)

type ConsensusListener struct {
	IsIDRemovedStub        func(uint64) bool
	isIDRemovedMutex       sync.RWMutex
	isIDRemovedArgsForCall []struct {
		arg1 uint64
	}
	isIDRemovedReturns struct {
		result1 bool
	}
	isIDRemovedReturnsOnCall map[int]struct {
		result1 bool
	}
	ProcessStub        func(context.Context, raftpb.Message) error
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		arg1 context.Context
		arg2 raftpb.Message
	}
	processReturns struct {
		result1 error
	}
	processReturnsOnCall map[int]struct {
		result1 error
	}
	ReportSnapshotStub        func(uint64, raft.SnapshotStatus)
	reportSnapshotMutex       sync.RWMutex
	reportSnapshotArgsForCall []struct {
		arg1 uint64
		arg2 raft.SnapshotStatus
	}
	ReportUnreachableStub        func(uint64)
	reportUnreachableMutex       sync.RWMutex
	reportUnreachableArgsForCall []struct {
		arg1 uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ConsensusListener) IsIDRemoved(arg1 uint64) bool {
	fake.isIDRemovedMutex.Lock()
	ret, specificReturn := fake.isIDRemovedReturnsOnCall[len(fake.isIDRemovedArgsForCall)]
	fake.isIDRemovedArgsForCall = append(fake.isIDRemovedArgsForCall, struct {
		arg1 uint64
	}{arg1})
	fake.recordInvocation("IsIDRemoved", []interface{}{arg1})
	fake.isIDRemovedMutex.Unlock()
	if fake.IsIDRemovedStub != nil {
		return fake.IsIDRemovedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isIDRemovedReturns
	return fakeReturns.result1
}

func (fake *ConsensusListener) IsIDRemovedCallCount() int {
	fake.isIDRemovedMutex.RLock()
	defer fake.isIDRemovedMutex.RUnlock()
	return len(fake.isIDRemovedArgsForCall)
}

func (fake *ConsensusListener) IsIDRemovedCalls(stub func(uint64) bool) {
	fake.isIDRemovedMutex.Lock()
	defer fake.isIDRemovedMutex.Unlock()
	fake.IsIDRemovedStub = stub
}

func (fake *ConsensusListener) IsIDRemovedArgsForCall(i int) uint64 {
	fake.isIDRemovedMutex.RLock()
	defer fake.isIDRemovedMutex.RUnlock()
	argsForCall := fake.isIDRemovedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ConsensusListener) IsIDRemovedReturns(result1 bool) {
	fake.isIDRemovedMutex.Lock()
	defer fake.isIDRemovedMutex.Unlock()
	fake.IsIDRemovedStub = nil
	fake.isIDRemovedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *ConsensusListener) IsIDRemovedReturnsOnCall(i int, result1 bool) {
	fake.isIDRemovedMutex.Lock()
	defer fake.isIDRemovedMutex.Unlock()
	fake.IsIDRemovedStub = nil
	if fake.isIDRemovedReturnsOnCall == nil {
		fake.isIDRemovedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isIDRemovedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *ConsensusListener) Process(arg1 context.Context, arg2 raftpb.Message) error {
	fake.processMutex.Lock()
	ret, specificReturn := fake.processReturnsOnCall[len(fake.processArgsForCall)]
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		arg1 context.Context
		arg2 raftpb.Message
	}{arg1, arg2})
	fake.recordInvocation("Process", []interface{}{arg1, arg2})
	fake.processMutex.Unlock()
	if fake.ProcessStub != nil {
		return fake.ProcessStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.processReturns
	return fakeReturns.result1
}

func (fake *ConsensusListener) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *ConsensusListener) ProcessCalls(stub func(context.Context, raftpb.Message) error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = stub
}

func (fake *ConsensusListener) ProcessArgsForCall(i int) (context.Context, raftpb.Message) {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	argsForCall := fake.processArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ConsensusListener) ProcessReturns(result1 error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	fake.processReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConsensusListener) ProcessReturnsOnCall(i int, result1 error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	if fake.processReturnsOnCall == nil {
		fake.processReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.processReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ConsensusListener) ReportSnapshot(arg1 uint64, arg2 raft.SnapshotStatus) {
	fake.reportSnapshotMutex.Lock()
	fake.reportSnapshotArgsForCall = append(fake.reportSnapshotArgsForCall, struct {
		arg1 uint64
		arg2 raft.SnapshotStatus
	}{arg1, arg2})
	fake.recordInvocation("ReportSnapshot", []interface{}{arg1, arg2})
	fake.reportSnapshotMutex.Unlock()
	if fake.ReportSnapshotStub != nil {
		fake.ReportSnapshotStub(arg1, arg2)
	}
}

func (fake *ConsensusListener) ReportSnapshotCallCount() int {
	fake.reportSnapshotMutex.RLock()
	defer fake.reportSnapshotMutex.RUnlock()
	return len(fake.reportSnapshotArgsForCall)
}

func (fake *ConsensusListener) ReportSnapshotCalls(stub func(uint64, raft.SnapshotStatus)) {
	fake.reportSnapshotMutex.Lock()
	defer fake.reportSnapshotMutex.Unlock()
	fake.ReportSnapshotStub = stub
}

func (fake *ConsensusListener) ReportSnapshotArgsForCall(i int) (uint64, raft.SnapshotStatus) {
	fake.reportSnapshotMutex.RLock()
	defer fake.reportSnapshotMutex.RUnlock()
	argsForCall := fake.reportSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ConsensusListener) ReportUnreachable(arg1 uint64) {
	fake.reportUnreachableMutex.Lock()
	fake.reportUnreachableArgsForCall = append(fake.reportUnreachableArgsForCall, struct {
		arg1 uint64
	}{arg1})
	fake.recordInvocation("ReportUnreachable", []interface{}{arg1})
	fake.reportUnreachableMutex.Unlock()
	if fake.ReportUnreachableStub != nil {
		fake.ReportUnreachableStub(arg1)
	}
}

func (fake *ConsensusListener) ReportUnreachableCallCount() int {
	fake.reportUnreachableMutex.RLock()
	defer fake.reportUnreachableMutex.RUnlock()
	return len(fake.reportUnreachableArgsForCall)
}

func (fake *ConsensusListener) ReportUnreachableCalls(stub func(uint64)) {
	fake.reportUnreachableMutex.Lock()
	defer fake.reportUnreachableMutex.Unlock()
	fake.ReportUnreachableStub = stub
}

func (fake *ConsensusListener) ReportUnreachableArgsForCall(i int) uint64 {
	fake.reportUnreachableMutex.RLock()
	defer fake.reportUnreachableMutex.RUnlock()
	argsForCall := fake.reportUnreachableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ConsensusListener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isIDRemovedMutex.RLock()
	defer fake.isIDRemovedMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	fake.reportSnapshotMutex.RLock()
	defer fake.reportSnapshotMutex.RUnlock()
	fake.reportUnreachableMutex.RLock()
	defer fake.reportUnreachableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ConsensusListener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ comm.ConsensusListener = new(ConsensusListener)
