"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8150],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(r),u=o,g=p["".concat(l,".").concat(u)]||p[u]||f[u]||a;return r?n.createElement(g,i(i({ref:t},d),{},{components:r})):n.createElement(g,i({ref:t},d))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2502:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={id:"block",title:"Proof of Existence of a Block"},i=void 0,c={unversionedId:"getting-started/proofs-and-verification/gosdk/block",id:"getting-started/proofs-and-verification/gosdk/block",isDocsHomePage:!1,title:"Proof of Existence of a Block",description:"Path in ledger query",source:"@site/docs/getting-started/proofs-and-verification/gosdk/block.md",sourceDirName:"getting-started/proofs-and-verification/gosdk",slug:"/getting-started/proofs-and-verification/gosdk/block",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/block",tags:[],version:"current",frontMatter:{id:"block",title:"Proof of Existence of a Block"},sidebar:"Documentation",previous:{title:"Proof of Existence of a Transaction",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/tx"},next:{title:"Proof of Existence of a State/Data",permalink:"/orion-server/docs/getting-started/proofs-and-verification/curl/state"}},l=[{value:"Path in ledger query",id:"path-in-ledger-query",children:[{value:"Ledger data access example",id:"ledger-data-access-example",children:[],level:3}],level:2}],s={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"path-in-ledger-query"},"Path in ledger query"),(0,o.kt)("p",null,"This type of query is used to prove that block X is connected to block Y, based on skip chain hashes. The query result contains a list of block headers, including block X, connecting blocks, and block Y. X > Y, because connectivity in skip chains, like in all blockchains, is from the latter block to the earlier one.\nFor more information about ledger consistency, see ",(0,o.kt)("a",{parentName:"p",href:"../../../architecture-and-design/block-skip-chain"},"Block Skip Chain")," and ",(0,o.kt)("a",{parentName:"p",href:"../../../architecture-and-design/block-structure"},"Block Structure"),"."),(0,o.kt)("p",null,"For more details on the full Ledger API exposed by the Orion Go SDK, see ",(0,o.kt)("a",{parentName:"p",href:"ledger"},"here"),"."),(0,o.kt)("h3",{id:"ledger-data-access-example"},"Ledger data access example"),(0,o.kt)("p",null,"The attached simple code snippet shows how to call block retrieval and ledger connectivity validation APIs from the SDK:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Please note: For presentation purposes, all results and error handling, except proofs, were eliminated."),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},'    txId := "Tx000" \n    db, err := bcdb.Create(conConf)\n    session, err := db.Session(&c.SessionConfig)\n    ledger, err := session.Ledger()\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'// Get block header for block 5"\nblockHeader, err := ledger.GetBlockHeader(5)\n\n// Get transaction receipt for txId\ntxReceipt, err := ledger.GetTransactionReceipt(txId)\n\n// Get the shortest path in ledger skip list between blocks and verify it\npath, err := ledger.GetLedgerPath(1, txReceipt.Header.BaseHeader.Number)\nres, err := bcdb.VerifyLedgerPath(path)\n\nif !res {\n    fmt.Printf("Block %d is not part of ledger\\n", txReceipt.Header.BaseHeader.Number)\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"")))}d.isMDXComponent=!0}}]);