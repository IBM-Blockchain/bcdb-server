"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8823],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,b=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(b,i(i({ref:t},l),{},{components:n})):r.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5202:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const o={id:"db",title:"Check the Existence of a Database"},i=void 0,s={unversionedId:"getting-started/queries/gosdk/db",id:"getting-started/queries/gosdk/db",isDocsHomePage:!1,title:"Check the Existence of a Database",description:"To check the existence of a database, we need to use a database context. The method Exists()",source:"@site/docs/getting-started/queries/gosdk/db.md",sourceDirName:"getting-started/queries/gosdk",slug:"/getting-started/queries/gosdk/db",permalink:"/orion-server/docs/getting-started/queries/gosdk/db",tags:[],version:"current",frontMatter:{id:"db",title:"Check the Existence of a Database"},sidebar:"Documentation",previous:{title:"Data Transaction",permalink:"/orion-server/docs/getting-started/transactions/curl/datatx"},next:{title:"Query User Information",permalink:"/orion-server/docs/getting-started/queries/gosdk/user"}},d=[{value:"Source Code",id:"source-code",children:[],level:2},{value:"Source Code Commentary",id:"source-code-commentary",children:[],level:2}],c={toc:d};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To check the existence of a database, we need to use a database context. The method ",(0,a.kt)("inlineCode",{parentName:"p"},"Exists()"),"\nin the ",(0,a.kt)("inlineCode",{parentName:"p"},"DBsTxContext")," checks whether a given database already exists in the Orion cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type DBsTxContext interface {\n    ...\n    ...\n    // Exists checks whenever database is already created\n    // highlight-next-line\n    Exists(dbName string) (bool, error)\n}\n")),(0,a.kt)("h2",{id:"source-code"},"Source Code"),(0,a.kt)("p",null,"The following code checks the existence of databases ",(0,a.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"db2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "admin")\n    // if err is not nil, print and return\n\n    dbtx, err := session.DBsTx()\n    // if err is not nil, print and return\n\n    exist, err := dbtx.Exists("db1")\n    // if err is not nil, print and return\n    fmt.Println("Does database exist?", exist)\n\n    exist, err = dbtx.Exists("db2")\n    // if err is not nil, print and return\n    fmt.Println("Does database exist?", exist)\n\n    err = dbtx.Abort()\n    // if err is not nil, print and return\n}\n')),(0,a.kt)("h2",{id:"source-code-commentary"},"Source Code Commentary"),(0,a.kt)("p",null,"For the sake of simplicity, not all errors are handled in this code. Furthermore, the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found ",(0,a.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,a.kt)("p",null,"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"session.DBsTx()")," starts a new database administration transaction and returns the database administration transaction context.\nNote that, in this example, we use this context only for the query purpose and not to perform any database administrative operation."),(0,a.kt)("p",null,"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},'dbtx.Exists("db1")')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'dbtx.Exists("db2")')," check whether the given databases exist or not. It returns a boolean flag where ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," denotes that the\ndatabase exists, while ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," denotes that the database does not exist."),(0,a.kt)("p",null,"As we are executing a read-only query, it is not necessary to commit the transaction and hence, we can abort it by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"dbtx.Abort()"),". If we need to record\nall the read-only transactions history into the centralized ledger, then it is advisable to do ",(0,a.kt)("inlineCode",{parentName:"p"},"dbtx.Commit()")," rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"dbtx.Abort()"),"."))}l.isMDXComponent=!0}}]);