syntax = "proto3";

option go_package = "github.ibm.com/blockchaindb/protos/types";

package types;

import "block_and_transaction.proto";
import "query_and_response.proto";

message TxProof {
  BlockHeader header = 1;
  repeated bytes path = 2;
}

message BlockProof {
  uint64 block_number = 1;
  repeated BlockHeader path = 2;
}

message GetBlockQuery {
  string userID = 1;
  uint64 block_number = 2;
}

message GetBlockQueryEnvelope {
  GetBlockQuery payload = 1;
  bytes signature = 2;
}

message GetBlockResponse {
  ResponseHeader header = 1;
  BlockHeader blockHeader = 2;
}

message GetBlockResponseEnvelope {
  GetBlockResponse payload = 1;
  bytes signature = 2;
}

message GetLedgerPathQuery {
  string userID = 1;
  uint64 start_block_number = 2;
  uint64 end_block_number = 3;
}

message GetLedgerPathQueryEnvelope {
  GetLedgerPathQuery payload = 1;
  bytes signature = 2;
}

message GetLedgerPathResponse {
  ResponseHeader header = 1;
  repeated BlockHeader blockHeaders = 2;
}

message GetLedgerPathResponseEnvelope {
  GetLedgerPathResponse payload = 1;
  bytes signature = 2;
}

message GetTxProofQuery {
  string userID = 1;
  uint64 block_number = 2;
  uint64 tx_index = 3;
}

message GetTxProofQueryEnvelope {
  GetTxProofQuery payload = 1;
  bytes signature = 2;
}

message GetTxProofResponse {
  ResponseHeader header = 1;
  repeated bytes hashes = 2;
}

message GetTxProofResponseEnvelope {
  GetTxProofResponse payload = 1;
  bytes signature = 2;
}

message GetHistoricalDataQuery {
    string userID = 1;
    string DBName = 2;
    string key = 3;
    Version version = 4;
    string direction = 5;
}

message GetHistoricalDataQueryEnvelope {
    GetHistoricalDataQuery payload = 1;
    bytes signature = 2;
}

message GetHistoricalDataResponse {
    ResponseHeader header = 1;
    repeated ValueWithMetadata values = 2;
}

message GetHistoricalDataResponseEnvelope {
  GetHistoricalDataResponse payload = 1;
  bytes signature = 2;
}

message GetDataReadersQuery {
    string userID = 1;
    string DBName = 2;
    string key = 3;
}

message GetDataReadersQueryEnvelope {
    GetDataReadersQuery payload = 1;
    bytes signature = 2;
}

message GetDataReadersResponse {
    ResponseHeader header = 1;
    map<string, uint32> read_by = 2;
}

message GetDataReadersResponseEnvelope {
  GetDataReadersResponse payload = 1;
  bytes signature = 2;
}

message GetDataWritersQuery {
    string userID = 1;
    string DBName = 2;
    string key = 3;
}

message GetDataWritersQueryEnvelope {
    GetDataWritersQuery payload = 1;
    bytes signature = 2;
}

message GetDataWritersResponse {
    ResponseHeader header = 1;
    map<string, uint32> written_by = 2;
}

message GetDataWritersResponseEnvelope {
  GetDataWritersResponse payload = 1;
  bytes signature = 2;
}

message GetDataReadByQuery {
    string userID = 1;
    string target_userID = 2;
}

message GetDataReadByQueryEnvelope {
    GetDataReadByQuery payload = 1;
    bytes signature = 2;
}

message GetDataReadByResponse {
    ResponseHeader header = 1;
    repeated KVWithMetadata KVs = 2;
}

message GetDataReadByResponseEnvelope {
  GetDataReadByResponse payload = 1;
  bytes signature = 2;
}

message GetDataWrittenByQuery {
    string userID = 1;
    string target_userID = 2;
}

message GetDataWrittenByQueryEnvelope {
    GetDataWrittenByQuery payload = 1;
    bytes signature = 2;
}

message GetDataWrittenByResponse {
    ResponseHeader header = 1;
    repeated KVWithMetadata KVs = 2;
}
message GetDataWrittenByResponseEnvelope {
  GetDataWrittenByResponse payload = 1;
  bytes signature = 2;
}

message GetTxIDsSubmittedByQuery {
    string userID = 1;
    string target_userID = 2;
}

message GetTxIDsSubmittedByQueryEnvelope {
    GetTxIDsSubmittedByQuery payload = 1;
    bytes signature = 2;
}

message GetTxIDsSubmittedByResponse {
    ResponseHeader header = 1;
    repeated string txIDs = 2;
}

message GetTxIDsSubmittedByResponseEnvelope {
  GetTxIDsSubmittedByResponse payload = 1;
  bytes signature = 2;
}

message TxReceipt {
  BlockHeader header = 1;
  uint64 tx_index = 2;
}

message GetTxReceiptQuery {
  string userID = 1;
  string txID = 2;
}

message GetTxReceiptQueryEnvelope {
  GetTxReceiptQuery payload = 1;
  bytes signature = 2;
}

message GetTxReceiptResponse {
  ResponseHeader header = 1;
  TxReceipt receipt = 2;
}

message GetTxReceiptResponseEnvelope {
  GetTxReceiptResponse payload = 1;
  bytes signature = 2;
}

