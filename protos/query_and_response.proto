syntax = "proto3";

option go_package = "github.ibm.com/blockchaindb/protos/types";

package types;

import "configuration.proto";

message GetDBStatusQueryEnvelope {
  GetDBStatusQuery payload = 1;
  bytes signature = 2;
}

message GetDBStatusQuery {
  string userID = 1;
  string DBName = 2;
}

message GetDBStatusResponseEnvelope {
  GetDBStatusResponse payload = 1;
  bytes signature = 2;

}

message GetDBStatusResponse {
  ResponseHeader header = 1;
  bool exist = 2;
}

message GetDataQueryEnvelope {
  GetDataQuery payload = 1;
  bytes signature = 2;
}

message GetDataQuery {
  string userID = 1;
  string DBName = 2;
  string key = 3;
}

message GetDataResponseEnvelope {
  GetDataResponse payload = 1;
  bytes signature = 2;
}

message GetDataResponse {
  ResponseHeader header = 1;
  bytes value = 2;
  Metadata metadata = 3;
}

message GetUserQueryEnvelope {
  GetUserQuery payload = 1;
  bytes signature = 2;
}

message GetUserQuery {
  string userID = 1;
  string targetUserID = 2;
}

message GetUserResponseEnvelope {
  GetUserResponse payload = 1;
  bytes signature = 2;
}

message GetUserResponse {
  ResponseHeader header = 1;
  User user = 2;
  Metadata metadata = 3;
}

message GetConfigQueryEnvelope {
  GetConfigQuery payload = 1;
  bytes signature = 2;
}

message GetConfigQuery {
  string userID = 1;
}

message GetNodeConfigQueryEnvelope {
  GetNodeConfigQuery payload = 1;
  bytes signature = 2;
}

message GetNodeConfigQuery {
  string userID = 1;
  string nodeID = 2;
}

message GetConfigResponseEnvelope {
  GetConfigResponse payload = 1;
  bytes signature = 2;
}

message GetConfigResponse {
  ResponseHeader header = 1;
  ClusterConfig config = 2;
  Metadata metadata = 3;
}

message GetNodeConfigResponseEnvelope {
  GetNodeConfigResponse payload = 1;
  bytes signature = 2;
}

message GetNodeConfigResponse {
  ResponseHeader header = 1;
  NodeConfig node_config = 2;
}

message Metadata {
  Version version = 1;
  AccessControl access_control = 2;
}

message Version {
  uint64 block_num = 1;
  uint64 tx_num = 2;
}

message AccessControl {
  map<string, bool> read_users = 1;
  map<string, bool> read_write_users = 2;
}

message KVWithMetadata{
  string key = 1;
  bytes value = 2;
  Metadata metadata = 3;
}

message ValueWithMetadata{
  bytes value = 1;
  Metadata metadata = 3;
}

message Digest {
  // Ledger merkle tree root
  bytes root_hash = 1;
  // Ledger height
  uint64 height = 2;
}

message ResponseHeader {
  string nodeID = 1;
}

message ValidationInfo {
  Flag flag = 1;
  string reason_if_invalid = 2;
}

enum Flag {
  VALID = 0;
  INVALID_MVCC_CONFLICT_WITHIN_BLOCK = 1;
  INVALID_MVCC_CONFLICT_WITH_COMMITTED_STATE = 2;
  INVALID_DATABASE_DOES_NOT_EXIST = 3;
  INVALID_NO_PERMISSION = 4;
  INVALID_INCORRECT_ENTRIES = 5;
  INVALID_UNAUTHORISED = 6;
}
