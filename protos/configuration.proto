// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

option go_package = "github.ibm.com/blockchaindb/server/pkg/types";

package types;

// ClusterConfig holds the configuration of a
// blockchain database cluster which includes
// a set of nodes, admins, and a root certificate
// authority
message ClusterConfig {
  repeated NodeConfig nodes = 1;
  repeated Admin admins = 2;
  CAConfig cert_auth_config = 3;
}

// NodeConfig holds the information about a database node in the cluster.
// This information is exposed to the clients.
// The address and port (see below) define the HTTP/REST endpoint that clients connect to,
// and must be reachable by clients that submit requests to the database.
//
// TODO: change the name NodeConfig to Node once the existing message Node is renamed to something else.
message NodeConfig {
  // A unique identifier for the node within the cluster.
  // TODO define and enforce the characters that can be used for this field. Should be something that complies with file names.
  string ID = 1;
  // The host name or IP address of the HTTP/REST endpoint served by this node.
  string address = 2;
  // The port of the HTTP/REST endpoint served by this node.
  uint32 port = 3;
  // The x509 certificate used by this node to authenticate its communication with clients.
  // This certificate corresponds to the private key the server uses to sign blocks and transaction responses.
  bytes certificate = 4;
}

// Admin holds the id and certificate of the cluster administrator.
message Admin {
  string ID = 1;
  bytes certificate = 2;
}

message CAConfig {
  repeated bytes roots = 1;
  repeated bytes intermediates = 2;
}

// Database configuration. Stores default read/write ACLs
// Stored as value in _dbs system database under key 'name'
message DatabaseConfig {
  string name = 1;
  repeated string read_access_users = 2;
  repeated string write_access_users = 3;
}

// User holds userID, certificate, privilege the user has,
// and groups the user belong to.
message User {
  string ID = 1;
  bytes certificate = 2;
  Privilege privilege = 3;
}

// Privilege holds user/group privilege information such as
// a list of databases to which the read is allowed, a list of
// databases to which the write is allowed, bools to indicate
// where the db manipulation such as DB creation/deletion and
// user manipulation such as add/update/delete are allowed.
message Privilege {
  enum Access {
      Read = 0;
      ReadWrite = 1;
  }
  map<string, Access> DB_permission = 1;
  // admin has privileges to submit a user administration transaction,
  // cluster configuration transaction, and database administration
  // transaction. Further, admin has permission to read-write states
  // from any database provided that the state has no ACL defined. If
  // a state has a read and write ACL, the admin can read or write to
  // the state only if the admin is listed in the read or write ACL list.
  bool admin = 2;
}
